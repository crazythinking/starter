# 运行模式类型。可选配置：Memory、Standalone、Cluster
# Memory模式, 用于测试
spring.shardingsphere.mode.type=Memory

# Standalone模式, 用于单机测试
#spring.shardingsphere.mode.type=Standalone
# 持久化仓库类型
#spring.shardingsphere.mode.repository.type=
# 持久化仓库所需属性
#spring.shardingsphere.mode.repository.props.<key>=
# 是否使用本地配置覆盖持久化配置
#spring.shardingsphere.mode.overwrite=

# Cluster模式, 用于集群测试
#spring.shardingsphere.mode.type=Cluster
# 持久化仓库类型
#spring.shardingsphere.mode.repository.type=
# 注册中心命名空间
#spring.shardingsphere.mode.repository.props.namespace=
# 注册中心连接地址
#spring.shardingsphere.mode.repository.props.server-lists=
# 持久化仓库所需属性
#spring.shardingsphere.mode.repository.props.<key>=
# 是否使用本地配置覆盖持久化配置
#spring.shardingsphere.mode.overwrite=


spring.shardingsphere.datasource.names=ds0,ds1
spring.shardingsphere.props.sql-show=true

# sharding策略绑定的表
spring.shardingsphere.rules.sharding.binding-tables=t_order,t_order_item

# 默认分库策略: 未指定策略时，只要被绑定的表中含有SNOW_FLAKE_ID列，则使用该策略
spring.shardingsphere.rules.sharding.default-database-strategy.standard.sharding-column=user_id
spring.shardingsphere.rules.sharding.default-database-strategy.standard.sharding-algorithm-name=default-db
# 默认分库策略
#spring.shardingsphere.rules.sharding.sharding-algorithms.default-db.type=MOD
#spring.shardingsphere.rules.sharding.sharding-algorithms.default-db.props.sharding-count=2
# 默认分库策略，与上方策略等价
spring.shardingsphere.rules.sharding.sharding-algorithms.default-db.type=INLINE
spring.shardingsphere.rules.sharding.sharding-algorithms.default-db.props.algorithm-expression=ds$->{user_id % 2}
# 指定表的分片模式，此例只分库，不分表
spring.shardingsphere.rules.sharding.tables.t_order.actual-data-nodes=ds$->{0..1}.t_order
spring.shardingsphere.rules.sharding.tables.t_order_item.actual-data-nodes=ds$->{0..1}.t_order_item

# 指定表的分库策略
#spring.shardingsphere.rules.sharding.tables.t_order.database-strategy.standard.sharding-column=user_id
#spring.shardingsphere.rules.sharding.tables.t_order.database-strategy.standard.sharding-algorithm-name=db-tOrder
# 指定表的分库策略规则
#spring.shardingsphere.rules.sharding.sharding-algorithms.db-tOrder.type=INLINE
#spring.shardingsphere.rules.sharding.sharding-algorithms.db-tOrder.props.algorithm-expression=ds$->{user_id % 2}
#spring.shardingsphere.rules.sharding.sharding-algorithms.db-tOrder.type=MOD
#spring.shardingsphere.rules.sharding.sharding-algorithms.db-tOrder.props.sharding-count=2
# 指定表的分表策略
#spring.shardingsphere.rules.sharding.tables.t_order.table-strategy.standard.sharding-column=user_id
#spring.shardingsphere.rules.sharding.tables.t_order.table-strategy.standard.sharding-algorithm-name=tb-tOrder
# 指定表的分表策略规则
#spring.shardingsphere.rules.sharding.sharding-algorithms.tb-tOrder.type=INLINE
#spring.shardingsphere.rules.sharding.sharding-algorithms.tb-tOrder.props.algorithm-expression=tOrder$->{user_id % 2}
#spring.shardingsphere.rules.sharding.sharding-algorithms.tb-tOrder.type=MOD
#spring.shardingsphere.rules.sharding.sharding-algorithms.tb-tOrder.props.sharding-count=2

#直接限定PG_ID_TEST_Ent1在ds1,其场景是表PG_ID_TEST_Ent1只在ds1所代表的数据库
#spring.shardingsphere.rules.sharding.tables.PG_ID_TEST_Ent1.actual-data-nodes=ds1.PG_ID_TEST_Ent1


