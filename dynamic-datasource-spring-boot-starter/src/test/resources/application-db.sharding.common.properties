spring.shardingsphere.datasource.names=ds0,ds1
spring.shardingsphere.sharding.default-data-source-name=ds0
spring.shardingsphere.props.sql.show=true

spring.shardingsphere.sharding.tables.PG_ID_SD_TEST_Ent.actual-data-nodes=ds$->{0..1}.PG_ID_SD_TEST_Ent$->{0..1}
spring.shardingsphere.sharding.tables.PG_ID_SD_TEST_Ent.database-strategy.inline.sharding-column=SNOW_FLAKE_ID
spring.shardingsphere.sharding.tables.PG_ID_SD_TEST_Ent.database-strategy.inline.algorithm-expression=ds$->{SNOW_FLAKE_ID % 2}
spring.shardingsphere.sharding.tables.PG_ID_SD_TEST_Ent.table-strategy.inline.sharding-column=SNOW_FLAKE_ID
spring.shardingsphere.sharding.tables.PG_ID_SD_TEST_Ent.table-strategy.inline.algorithm-expression=PG_ID_SD_TEST_Ent$->{SNOW_FLAKE_ID % 2}
spring.shardingsphere.sharding.binding-tables=PG_ID_SD_TEST_Ent

#直接限定PG_ID_TEST_Ent1在ds1,其场景是表PG_ID_TEST_Ent1只在ds1所代表的数据库
spring.shardingsphere.sharding.tables.PG_ID_TEST_Ent1.actual-data-nodes=ds1.PG_ID_TEST_Ent1
